datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  password              String?
  role                  UserRole @default(User)
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFatorConfirmation[]
  image                 String?
  accounts              Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id            String    @id @default(cuid())
  email         String
  token         String    @unique
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id @default(cuid())
  email         String
  token         String    @unique
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFatorToken {
  id            String    @id @default(cuid())
  email         String
  token         String    @unique
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFatorConfirmation {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
